{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Environmental Science Analysis","text":"<p>Fall 2024 | 16:375:501 Environmental Science Analysis Rutgers University, Department of Environmental Sciences</p>"},{"location":"#schedule","title":"Schedule","text":"Week topic Week 1 Course introduction Week 2 Introduction to environmental datasets, Install Python (Windows, Mac, Amarel) Week 3 Core Python Language Week 4 Scientific Computing with Python Week 5 Working with tabular data in Python Week 6 Correlation and regressions Week 7 Time series analysis Week 8 Environmental data visualization Week 9 Spatial data analysis Week 10 Working with multi-dimensional data Week 11 Making maps Week 12 Reproducible research Week 13 Environmental science packages in Python Week 14 Final Project"},{"location":"Schedule/","title":"Schedule","text":""},{"location":"Schedule/#schedule","title":"Schedule","text":"Week topic Week 1 Course introduction Week 2 Introduction to environmental datasets, Install Python (Windows, Mac, Amarel) Week 3 Core Python Language Week 4 Scientific Computing with Python Week 5 Working with tabular data in Python Week 6 Correlation and regressions Week 7 Time series analysis Week 8 Environmental data visualization Week 9 Spatial data analysis Week 10 Working with multi-dimensional data Week 11 Making maps Week 12 Reproducible research Week 13 Environmental science packages in Python Week 14 Final Project"},{"location":"Syllabus/","title":"Syllabus","text":""},{"location":"Syllabus/#part-1-course-information","title":"Part 1: Course Information","text":"<p>Class Time and Location: Online Asynchronous </p>"},{"location":"Syllabus/#instructor","title":"Instructor:","text":"<p>Xiaomeng Jin Department of Environmental Sciences Office: ENR 230 Email: xiaomeng.jin@rutgers.edu Office Hour: TBD</p>"},{"location":"Syllabus/#part-2-overview","title":"Part 2: Overview","text":"<p>This course will introduce data analysis techniques for applications in environmental sciences. The course will teach students scientific programming in Python, statistical analysis, visualization, spatial analysis techniques that are commonly used to process and interpret environmental datasets. The course is designed to be accessible for graduate and upper-level undergraduate students in environmental sciences or other related disciplines.  </p>"},{"location":"Syllabus/#part-3-course-structure","title":"Part 3: Course Structure","text":"<p>Format: This is an online asynchronous course, meaning that we do not \u2018meet\u2019, not even via the web. Therefore, you decide when to do the work. To prevent you from procrastinating too much, you will have an assignment due each week for the first 12 weeks. Your assignment each week is to follow the instructions to complete a Jupyter notebook. By the end of the semester, you should have a notebook collection that you can use as coding recipe for your final project and your future research/work.   Textbook: There is no required textbook. All materials will come from free online resources and the course website itself.  Computers: Students will have the option to use their laptop, Amarel (the university\u2019s high performance computing cluster), or Google\u2019s Colaboratory (https://colab.research.google.com) to work on their assignments and final project.  </p>"},{"location":"Syllabus/#part-4-grading-policy","title":"Part 4: Grading Policy","text":""},{"location":"Syllabus/#weekly-assignments-50","title":"Weekly Assignments (50%)","text":"<p>\u2022   Total: 100 \u2022   All questions complete: 50 \u2022   All questions correct: 30  \u2022   Clean, elegant, efficient code: rate between 0 and 10  \u2022   Clear comments and explanations: rate between 0 and 10  \u2022   Lowest grade on an assignment will be dropped. </p>"},{"location":"Syllabus/#weekly-quiz-20","title":"Weekly Quiz (20%)","text":"<p>\u2022   Multiple choice or short answer questions</p>"},{"location":"Syllabus/#final-project-30","title":"Final Project (30%)","text":"<p>The goal of the final project is to assess your ability to combine and apply the skills you have learned in class in the context of a real-world research problem. Our class has mostly focused on tools for environmental data analysis, so this must be the focus of your final project. Specifically, we seek to assess your ability to do the following tasks:  \u2022   Discover and download real datasets in standard formats (e.g. CSV, netCDF)  \u2022   Load the data into pandas or xarray, performing any necessary data cleanup (dealing with missing values, proper time encoding, etc.) along the way.  \u2022   Perform realistic scientific calculation involving, for example tasks such as data grouping, aggregating, correlation analysis, trend analysis.  \u2022   Visualize your results in well-formatted plots.   \u2022   Clearly document your analysis to make it reproducible.  \u2022   Publish your final project as a GitHub repository. </p>"},{"location":"Syllabus/#grading","title":"Grading","text":"<p>\u2022   Total: 100  \u2022   Data: 30  \u2022   Statistical analysis: 30  \u2022   Visualization: 20  \u2022   Clean, efficient, reproducible code: 20 </p>"},{"location":"Week_2_install_python_amarel/","title":"Install Mamba and Python: Amarel User","text":"<ul> <li> <p>Request Amarel Account from Rutgers Office of Advanced Computing</p> </li> <li> <p>Connect to Amarel Open OnDemand </p> </li> <li>Click Clusters </li> <li>Choose Amarel Cluster Shell Access </li> <li>Enter your password </li> <li> <p>In the terminal, do the following commands (one line each time). If you're using Windows, type 'Ctrl+c' to copy and 'Ctrl+Shift+v' to paste command. </p> </li> <li> <p>Install Miniforge using: </p> </li> </ul> <pre><code>wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\"\nbash Miniforge3-$(uname)-$(uname -m).sh\n</code></pre> <pre><code>    Agree license term: yes \n    Confirm install location: ENTER\n    Do you wish to update your shell profile to automatically initialize conda: yes\n</code></pre> <ul> <li>Close terminal window, and reopen a terminal window. Test if Mamba and Conda have been successfully installed</li> </ul> <pre><code>mamba\n</code></pre> <p>You should see</p> <pre><code>conda is a tool for managing and deploying applications, environments and packages. \n....\n</code></pre> <ul> <li>Create a new environment <code>esa_env</code>: </li> </ul> <pre><code>mamba create -n esa_env python=3.9 jupyter jupyterlab notebook numpy scipy ipython pandas matplotlib cartopy geopandas xarray dask netCDF4 seaborn statsmodels pooch\n</code></pre> <ul> <li> <p>Next, go back to Amarel Open OnDemand. This time, we will launch a personal jupyter. Click on 'Interactive Apps', choose 'Personal Jupyter'. </p> </li> <li> <p>Settings for Personal Jupyter: </p> </li> </ul> <pre><code>    Number of hours: 10 \n    Number of cores: 1 \n    Gigabytes of memory: 10 \n    Partition: main\n    Leave Reservation and slurm feature blank \n    conda path: /home/YOURNETID/miniforge3\n    conda environment: esa_env\n</code></pre> <ul> <li> <p>You should see Jupyter lab page automatically opened in your web browser. </p> </li> <li> <p>In the Jupyter Lab, go to File -&gt; Open from Path. Enter the path of your home folder: /home/YOURNETID/</p> </li> <li> <p>Once you're at your home folder, open a new Jupyter notebook by clicking the + sign. Choose Notebook. </p> </li> <li> <p>Rename the Notebook to be 'Lecture_2_Install_Python.ipynb'</p> </li> <li> <p>Enter the following code in the Notebook to test if you successfully installed all necessary packages:</p> </li> </ul> <pre><code>import xarray as xr\nimport pandas as pd\nimport geopandas as gpd\n</code></pre> <p>If no errors, enter the following to test the plotting functions:</p> <pre><code>ds = xr.tutorial.load_dataset(\"air_temperature\")\nds.air[0,:,:].plot()\n</code></pre> <p>-Download and submit this Notebook as your assignment. </p>"},{"location":"Week_2_install_python_mac/","title":"Install Mamba and Python: Mac User","text":"<ul> <li> <p>Open Terminal (Launchpad -&gt; Other -&gt; Terminal)</p> </li> <li> <p>Install Miniforge using: </p> </li> </ul> <pre><code>curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\"\nbash Miniforge3-$(uname)-$(uname -m).sh\n</code></pre> <ul> <li>Install Mamba on your laptop:</li> </ul> <pre><code>    Agree license term: yes \n    Confirm install location: ENTER\n    Do you wish to update your shell profile to automatically initialize conda: yes\n</code></pre> <ul> <li>Close terminal window, and reopen a terminal window. Test if Mamba and Conda have been successfully installed</li> </ul> <pre><code>mamba\n</code></pre> <p>You should see</p> <pre><code>conda is a tool for managing and deploying applications, environments and packages. \n....\n</code></pre> <ul> <li>In the terminal, create a new environment <code>esa_env</code>: </li> </ul> <pre><code>mamba create -n esa_env python=3.9 jupyter jupyterlab notebook numpy scipy ipython pandas matplotlib cartopy geopandas xarray dask netCDF4 seaborn statsmodels pooch\n</code></pre> <ul> <li>After it's finished, activate the environment: </li> </ul> <pre><code>mamba activate esa_env\n</code></pre> <ul> <li>Invoke Jupyter Lab: </li> </ul> <pre><code>jupyter lab\n</code></pre> <ul> <li> <p>You should see Jupyter lab page automatically opened in your web browser. If not, copy and paste one of the URLs listed to your web browser.</p> </li> <li> <p>In the Jupyter Lab, go to File -&gt; Open from Path. Enter the path of your course folder. </p> </li> <li> <p>If you don't know the folder path, find the folder in Finder, right click on the folder, press Option, and click Copy \"environmental_science_analysis\" as Pathname. </p> </li> <li> <p>Once you're at your course folder, open a new Jupyter notebook by clicking the + sign. Choose Notebook. </p> </li> <li> <p>Rename the Notebook to be 'Lecture_2_Install_Python.ipynb'</p> </li> <li> <p>Enter the following code in the Notebook to test if you successfully installed all necessary packages:</p> </li> </ul> <pre><code>import xarray as xr\nimport pandas as pd\nimport geopandas as gpd\n</code></pre> <p>If no errors, enter the following to test the plotting functions:</p> <pre><code>ds = xr.tutorial.load_dataset(\"air_temperature\")\nds.air[0,:,:].plot()\n</code></pre> <p>-Submit this Jupyter Notebook as your assignment. </p>"},{"location":"Week_2_install_python_windows/","title":"Install Mamba and Python: Windows User","text":"<ul> <li> <p>Go to Miniforge Website.</p> </li> <li> <p>Open Minoforge page, download and execute the Windows installer.</p> </li> <li> <p>When asked about the Installation Type: Choose 'Just Me'</p> </li> <li> <p>Follow the default settings for the Advanced Installation Option. </p> </li> <li> <p>After installing Miniforge, open the Miniforge Prompt </p> </li> <li> <p>Test if Mamba and Conda have been successfully installed by entering the following in Miniforge Prompt. </p> </li> </ul> <pre><code>mamba\n</code></pre> <p>You should see</p> <pre><code>conda is a tool for managing and deploying applications, environments and packages. \n....\n</code></pre> <ul> <li>In the terminal, create a new environment <code>esa_env</code>: </li> </ul> <pre><code>mamba create -n esa_env python=3.9 jupyter jupyterlab notebook numpy scipy ipython pandas matplotlib cartopy geopandas xarray dask netCDF4 seaborn statsmodels pooch\n</code></pre> <ul> <li>After it's finished, activate the environment: </li> </ul> <pre><code>mamba activate esa_env\n</code></pre> <ul> <li>Invoke Jupyter Lab and specify the directory (e.g., if your course folder is located at E disk, specify it as E:/): </li> </ul> <pre><code>jupyter lab --notebook-dir=E:/ \n</code></pre> <ul> <li> <p>You should see Jupyter lab page automatically opened in your web browser. If not, copy and paste one of the URLs listed to your web browser.</p> </li> <li> <p>In the Jupyter Lab, you should see the directory of the disk on the left. Browse through the content and enter your course folder by clicking on it. </p> </li> <li> <p>Once you're at your course folder, open a new Jupyter notebook by clicking the + sign. Choose Notebook. </p> </li> <li> <p>Rename the Notebook to be 'Lecture_2_Install_Python.ipynb'</p> </li> <li> <p>Enter the following code in the Notebook to test if you successfully installed all necessary packages:</p> </li> </ul> <pre><code>import xarray as xr\nimport pandas as pd\nimport geopandas as gpd\n</code></pre> <p>If no errors, enter the following to test the plotting functions:</p> <pre><code>ds = xr.tutorial.load_dataset(\"air_temperature\")\nds.air[0,:,:].plot()\n</code></pre> <p>-Submit this Jupyter Notebook as your assignment. </p>"},{"location":"Week_3_Core_Python/","title":"Week 3 Core Python Language","text":"In\u00a0[1]: Copied! <pre># comments are anything that comes after the \"#\" symbol\na = 1       # assign 1 to variable a\nb = \"hello\" # assign \"hello\" to variable b\n</pre> # comments are anything that comes after the \"#\" symbol a = 1       # assign 1 to variable a b = \"hello\" # assign \"hello\" to variable b <p>HintsThe following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:</p> <pre><code>False      class      finally    is         return\nNone       continue   for        lambda     try\nTrue       def        from       nonlocal   while\nand        del        global     not        with\nas         elif       if         or         yield\nassert     else       import     pass\nbreak      except     in         raise</code></pre> <p>Additionally, the following a built in functions which are always available in your namespace once you open a python interpreter</p> <pre><code>abs() dict() help() min() setattr() all() dir() hex() next() slice() any()\ndivmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod()\nbin() eval() int() open() str() bool() exec() isinstance() ord() sum() bytearray()\nfilter() issubclass() pow() super() bytes() float() iter() print() tuple()\ncallable() format() len() property() type() chr() frozenset() list() range()\nvars() classmethod() getattr() locals() repr() zip() compile() globals() map()\nreversed() __import__() complex() hasattr() max() round() delattr() hash()\nmemoryview() set()</code></pre> In\u00a0[2]: Copied! <pre># how to we see our variables?\nprint(a)\nprint(b)\nprint(a,b)\n</pre> # how to we see our variables? print(a) print(b) print(a,b) <pre>1\nhello\n1 hello\n</pre> <p>All variables are objects. Every object has a type (class). To find out what type your variables are</p> In\u00a0[3]: Copied! <pre># as a shortcut, iPython notebooks will automatically print whatever is on the last line\ntype(b)\n</pre> # as a shortcut, iPython notebooks will automatically print whatever is on the last line type(b) Out[3]: <pre>str</pre> In\u00a0[4]: Copied! <pre>type(a) is int\n</pre> type(a) is int Out[4]: <pre>True</pre> <p>Hints Different objects attributes and methods, which can be accessed via the syntax <code>variable.method</code></p> <p>IPython will autocomplete if you press <code>&lt;tab&gt;</code> to show you the methods available.</p> In\u00a0[5]: Copied! <pre># this returns the method itself\nb.capitalize\n</pre> # this returns the method itself b.capitalize Out[5]: <pre>&lt;function str.capitalize()&gt;</pre> In\u00a0[6]: Copied! <pre># this calls the method\nb.capitalize()\n# there are lots of other methods\n</pre> # this calls the method b.capitalize() # there are lots of other methods Out[6]: <pre>'Hello'</pre> In\u00a0[7]: Copied! <pre># binary operations act differently on different types of objects\nc = 'World'\nprint(b + c)\nprint(a + 2)\nprint(a + b)\n</pre> # binary operations act differently on different types of objects c = 'World' print(b + c) print(a + 2) print(a + b) <pre>helloWorld\n3\n</pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[7], line 5\n      3 print(b + c)\n      4 print(a + 2)\n----&gt; 5 print(a + b)\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[8]: Copied! <pre># addition / subtraction\n1+1-5\n</pre> # addition / subtraction 1+1-5 Out[8]: <pre>-3</pre> In\u00a0[9]: Copied! <pre># multiplication\n5 * 10\n</pre> # multiplication 5 * 10 Out[9]: <pre>50</pre> In\u00a0[10]: Copied! <pre># division\n1/2\n</pre> # division 1/2 Out[10]: <pre>0.5</pre> In\u00a0[11]: Copied! <pre># that was automatically converted to a float\ntype(1/2)\n</pre> # that was automatically converted to a float type(1/2) Out[11]: <pre>float</pre> In\u00a0[12]: Copied! <pre># exponentiation\n2**4\n</pre> # exponentiation 2**4 Out[12]: <pre>16</pre> In\u00a0[13]: Copied! <pre># rounding\nround(9/10)\n</pre> # rounding round(9/10) Out[13]: <pre>1</pre> In\u00a0[14]: Copied! <pre># built in complex number support\n(1+2j) / (3-4j)\n</pre> # built in complex number support (1+2j) / (3-4j) Out[14]: <pre>(-0.2+0.4j)</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[15]: Copied! <pre>True and True\n</pre> True and True Out[15]: <pre>True</pre> In\u00a0[16]: Copied! <pre>True and False\n</pre> True and False Out[16]: <pre>False</pre> In\u00a0[17]: Copied! <pre># logic\n\n(not True) or (not False)\n</pre> # logic  (not True) or (not False) Out[17]: <pre>True</pre> In\u00a0[18]: Copied! <pre>True or True\n</pre> True or True Out[18]: <pre>True</pre> In\u00a0[19]: Copied! <pre>x = 4\nx &lt; 5 and  x &lt; 10\n</pre> x = 4 x &lt; 5 and  x &lt; 10 Out[19]: <pre>True</pre> In\u00a0[20]: Copied! <pre>x = 4\nx &lt; 5 or x &lt; 4\n</pre> x = 4 x &lt; 5 or x &lt; 4 Out[20]: <pre>True</pre> In\u00a0[21]: Copied! <pre>x = 4\nx &lt; 5 and x &lt; 4\n</pre> x = 4 x &lt; 5 and x &lt; 4 Out[21]: <pre>False</pre> In\u00a0[22]: Copied! <pre>not(x &lt; 5 and x &lt; 10)\n</pre> not(x &lt; 5 and x &lt; 10) Out[22]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[50]: Copied! <pre>x = 100\nif x &gt; 0:\n    print('Positive Number')\nelif x &lt; 0:\n    print('Negative Number')\nelse:\n    print ('Zero!')\n</pre> x = 100 if x &gt; 0:     print('Positive Number') elif x &lt; 0:     print('Negative Number') else:     print ('Zero!') <pre>Positive Number\n</pre> In\u00a0[51]: Copied! <pre># Blocks are closed by indentation level\nif x &gt; 0:\n    print('Positive Number')\n    if x &gt;= 100:\n        print('Huge number!')\n</pre> # Blocks are closed by indentation level if x &gt; 0:     print('Positive Number')     if x &gt;= 100:         print('Huge number!') <pre>Positive Number\nHuge number!\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[52]: Copied! <pre># make a loop \ncount = 0\nwhile count &lt; 10:\n    # bad way\n    # count = count + 1\n    # better way\n    count += 1\nprint(count)\n</pre> # make a loop  count = 0 while count &lt; 10:     # bad way     # count = count + 1     # better way     count += 1 print(count) <pre>10\n</pre> <p>Hint: Be careful with the conditions. Avoid defining an infinite loop.</p> In\u00a0[53]: Copied! <pre># use range\nfor i in range(5):\n    print(i)\n</pre> # use range for i in range(5):     print(i) <pre>0\n1\n2\n3\n4\n</pre> In\u00a0[54]: Copied! <pre># Reverse the order\nfor i in range(5,0,-1):\n    print(i)\n</pre> # Reverse the order for i in range(5,0,-1):     print(i) <pre>5\n4\n3\n2\n1\n</pre> <p>Important point: in python, we always count from 0!</p> In\u00a0[55]: Copied! <pre># what is range?\ntype(range)\n</pre> # what is range? type(range) Out[55]: <pre>type</pre> In\u00a0[56]: Copied! <pre>range?\n</pre> range? <pre>Init signature: range(self, /, *args, **kwargs)\nDocstring:     \nrange(stop) -&gt; range object\nrange(start, stop[, step]) -&gt; range object\n\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\nType:           type\nSubclasses:     </pre> In\u00a0[57]: Copied! <pre># iterate over a list we make up\nfor pet in ['dog', 'cat', 'fish']:\n    print(pet, len(pet))\n</pre> # iterate over a list we make up for pet in ['dog', 'cat', 'fish']:     print(pet, len(pet)) <pre>dog 3\ncat 3\nfish 4\n</pre> <p>What is the thing in brackets? A list! Lists are one of the core python data structures.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[58]: Copied! <pre>l = ['dog', 'cat', 'fish']\ntype(l)\n</pre> l = ['dog', 'cat', 'fish'] type(l) Out[58]: <pre>list</pre> In\u00a0[37]: Copied! <pre># list have lots of methods\nl.sort()\nl\n</pre> # list have lots of methods l.sort() l Out[37]: <pre>['cat', 'dog', 'fish']</pre> In\u00a0[38]: Copied! <pre># we can convert a range to a list\nr = list(range(5))\nr\n</pre> # we can convert a range to a list r = list(range(5)) r Out[38]: <pre>[0, 1, 2, 3, 4]</pre> In\u00a0[39]: Copied! <pre>while r:\n    p = r.pop()\n    print('p:', p)\n    print('r:', r)\n</pre> while r:     p = r.pop()     print('p:', p)     print('r:', r) <pre>p: 4\nr: [0, 1, 2, 3]\np: 3\nr: [0, 1, 2]\np: 2\nr: [0, 1]\np: 1\nr: [0]\np: 0\nr: []\n</pre> <p>There are many different ways to interact with lists. Exploring them is part of the fun of python.</p> <p>list.append(x) Add an item to the end of the list. Equivalent to a[len(a):] = [x].</p> <p>list.extend(L) Extend the list by appending all the items in the given list. Equivalent to a[len(a):] = L.</p> <p>list.insert(i, x) Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).</p> <p>list.remove(x) Remove the first item from the list whose value is x. It is an error if there is no such item.</p> <p>list.pop([i]) Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)</p> <p>list.clear() Remove all items from the list. Equivalent to del a[:].</p> <p>list.index(x) Return the index in the list of the first item whose value is x. It is an error if there is no such item.</p> <p>list.count(x) Return the number of times x appears in the list.</p> <p>list.sort() Sort the items of the list in place.</p> <p>list.reverse() Reverse the elements of the list in place.</p> <p>list.copy() Return a shallow copy of the list. Equivalent to a[:].</p> <p>Don't assume you know how list operations work!</p> In\u00a0[40]: Copied! <pre># \"add\" two lists\nx = list(range(5))\ny = list(range(10,15))\nz = x + y\nz\n</pre> # \"add\" two lists x = list(range(5)) y = list(range(10,15)) z = x + y z Out[40]: <pre>[0, 1, 2, 3, 4, 10, 11, 12, 13, 14]</pre> In\u00a0[41]: Copied! <pre># access items from a list\nprint('first', z[0])\nprint('last', z[-1])\nprint('first 3', z[:3])\nprint('last 3', z[-3:])\nprint('middle, skipping every other item', z[5:10:2])\n</pre> # access items from a list print('first', z[0]) print('last', z[-1]) print('first 3', z[:3]) print('last 3', z[-3:]) print('middle, skipping every other item', z[5:10:2]) <pre>first 0\nlast 14\nfirst 3 [0, 1, 2]\nlast 3 [12, 13, 14]\nmiddle, skipping every other item [10, 12, 14]\n</pre> <p>MEMORIZE THIS SYNTAX! It is central to so much of python and often proves confusing for users coming from other languages.</p> <p>In terms of set notation, python indexing is left inclusive, right exclusive. If you remember this, you will never go wrong.</p> In\u00a0[42]: Copied! <pre># that means we get an error from the following\nN = len(z)\nz[N]\n</pre> # that means we get an error from the following N = len(z) z[N] <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[42], line 3\n      1 # that means we get an error from the following\n      2 N = len(z)\n----&gt; 3 z[N]\n\nIndexError: list index out of range</pre> In\u00a0[43]: Copied! <pre># this index notation also applies to strings\nname = 'Xiaomeng Jin'\nprint(name[:4])\n</pre> # this index notation also applies to strings name = 'Xiaomeng Jin' print(name[:4]) <pre>Xiao\n</pre> In\u00a0[44]: Copied! <pre>print(name[:-4])\n</pre> print(name[:-4]) <pre>Xiaomeng\n</pre> In\u00a0[45]: Copied! <pre>print(name[-3:])\n</pre> print(name[-3:]) <pre>Jin\n</pre> In\u00a0[46]: Copied! <pre># you can also test for the presence of items in a list\n5 in z\n</pre> # you can also test for the presence of items in a list 5 in z Out[46]: <pre>False</pre> <p>Lists are not meant for math! They don't have a datatype.</p> In\u00a0[47]: Copied! <pre>z[4] = 'fish'\nz\n</pre> z[4] = 'fish' z Out[47]: <pre>[0, 1, 2, 3, 'fish', 10, 11, 12, 13, 14]</pre> <p>Python is full of tricks for iterating and working with lists</p> In\u00a0[48]: Copied! <pre># a cool python trick: list comprehension\nsquares = [n**2 for n in range(5)]\nsquares\n</pre> # a cool python trick: list comprehension squares = [n**2 for n in range(5)] squares Out[48]: <pre>[0, 1, 4, 9, 16]</pre> In\u00a0[49]: Copied! <pre># iterate over two lists together uzing zip\nfor item1, item2 in zip(x,y):\n    print('first:', item1, 'second:', item2)\n</pre> # iterate over two lists together uzing zip for item1, item2 in zip(x,y):     print('first:', item1, 'second:', item2) <pre>first: 0 second: 10\nfirst: 1 second: 11\nfirst: 2 second: 12\nfirst: 3 second: 13\nfirst: 4 second: 14\n</pre> <p>Define a list from a range of values, check if an element exists in the list.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>In this problem, we will explore the basic data structures and flow controls of python by manually parsing a CSV file.</p> <p>Note that this is a futile exercise. In the \"real world\" you should never manually parse a CSV file. There are utilities out there that will do it for you much more quickly and efficiently. However, it is a useful exercise for learning python.</p> <p>Before starting the python part, use the JupyterLab file browser to browse to this file. Click to open it. What do you see?</p> <p>Now we will begin the process of reading the file with python</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>It should be a familiar type we learned about in class.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Week_3_Core_Python/#week-3-core-python-language","title":"Week 3 Core Python Language\u00b6","text":"<p>Mostly copied from the official python tutorial</p>"},{"location":"Week_3_Core_Python/#1-invoking-python","title":"1. Invoking Python\u00b6","text":"<p>There are three main ways to use python.</p> <ol> <li>By running a python file, e.g. <code>python myscript.py</code></li> <li>Through an interactive console (python interpreter or ipython shell)</li> <li>In an interactive Jupyter Lab</li> </ol> <p>We will be using the Jupyter Lab.</p>"},{"location":"Week_3_Core_Python/#2-basic-variables-numbers-and-string","title":"2. Basic Variables: Numbers and String\u00b6","text":""},{"location":"Week_3_Core_Python/#exercise-2","title":"Exercise 2:\u00b6","text":"<p>Define a float variable d = 8. Print the type of the variable.</p>"},{"location":"Week_3_Core_Python/#3-math","title":"3. Math\u00b6","text":"<p>Basic arithmetic and boolean logic is part of the core python library.</p>"},{"location":"Week_3_Core_Python/#exercise-3","title":"Exercise 3:\u00b6","text":"<p>Let a = 2, b = 3.3, c = 2, calculate the following equation.</p> <p>$y = 6a^3 - \\frac{8b^2}{4c} + 11$</p>"},{"location":"Week_3_Core_Python/#4-logic","title":"4. Logic:\u00b6","text":"<p><code>and</code>: Returns True if both statements are true</p> <p><code>or</code>: Returns True if one of the statements is true</p> <p><code>not</code>: Reverse the result, returns False if the result is true</p>"},{"location":"Week_3_Core_Python/#exercise-4","title":"Exercise 4:\u00b6","text":"<p>For each of the following expressions, guess whether they evaluate to <code>True</code> or <code>False</code>. Then type them to check your answers.</p> <ol> <li>1&lt;=1</li> <li>1!=1</li> <li>123 == '123'</li> <li>1!=1 and 1&lt;=1</li> <li>1!=1 or 1&lt;=1</li> <li>'good' != 'bad'</li> </ol>"},{"location":"Week_3_Core_Python/#5-conditionals","title":"5. Conditionals\u00b6","text":"<p>Conditional statements are an essential part of programming in Python. They allow you to make decisions based on the values of variables or the result of comparisons.</p> <p>Hint: In Python, indentation is MANDATORY. Blocks are closed by indentation level.</p>"},{"location":"Week_3_Core_Python/#exercise-5","title":"Exercise 5:\u00b6","text":"<p>Given a number <code>x</code>, print if it is an odd or even number.</p>"},{"location":"Week_3_Core_Python/#6-loop","title":"6 Loop\u00b6","text":"<p>A loop is an instruction that repeats multiple times as long as some condition is met. Loops are useful for iterating over sequences (like lists, strings, or ranges) or performing a task multiple times.</p>"},{"location":"Week_3_Core_Python/#while-loop","title":"while loop\u00b6","text":"<p>A while loop repeatedly executes a block of code as long as a specified condition is True.</p>"},{"location":"Week_3_Core_Python/#for-loop","title":"for loop\u00b6","text":"<p>A for loop is used to iterate over a sequence (such as a list, tuple, string, or range) and execute a block of code for each item in that sequence.</p>"},{"location":"Week_3_Core_Python/#exercise","title":"Exercise:\u00b6","text":"<p>Create a loop from 100 to 1, if odd number, print 'odd' and the number, or print 'even' and the number.</p>"},{"location":"Week_3_Core_Python/#7-lists","title":"7. Lists\u00b6","text":"<p>In Python, a list is a built-in data type that allows you to store an ordered collection of items. These items can be of any data type, including integers, strings, floating-point numbers, or even other lists. Lists are mutable, meaning that you can change their content after they've been created (e.g., by adding, removing, or modifying elements).</p>"},{"location":"Week_3_Core_Python/#exercise-7","title":"Exercise 7:\u00b6","text":""},{"location":"Week_3_Core_Python/#8-assignment-python-lists-and-loops","title":"8. Assignment:  Python Lists and Loops\u00b6","text":""},{"location":"Week_3_Core_Python/#81-open-the-file-using-the-open-function","title":"8.1 Open the file using the <code>open</code> function\u00b6","text":"<p>Specifically, run the command</p> <pre><code>file = open('esa_roster_fall_2024.csv')</code></pre>"},{"location":"Week_3_Core_Python/#82-use-the-help-function-to-get-the-documentation-for-your-new-variable-file","title":"8.2 Use the <code>help</code> function to get the documentation for your new variable <code>file</code>\u00b6","text":"<p>This will produce a long list of methods you can use with <code>file</code>.</p>"},{"location":"Week_3_Core_Python/#83-read-the-lines-of-the-file-into-a-variable-called-lines","title":"8.3 Read the lines of the file into a variable called <code>lines</code>\u00b6","text":"<p>Hint: use the documentation above to find the method that sounds most likely to do what you want.</p>"},{"location":"Week_3_Core_Python/#84-display-lines-at-the-end-of-a-cell-in-order-to-see-its-contents","title":"8.4 Display <code>lines</code> at the end of a cell in order to see its contents\u00b6","text":""},{"location":"Week_3_Core_Python/#85-display-the-number-of-students-in-class","title":"8.5 Display the number of students in class\u00b6","text":""},{"location":"Week_3_Core_Python/#86-use-slicing-to-display-the-first-three-items-of-the-list-and-the-last-3","title":"8.6 Use slicing to display the first three items of the list. And the last 3\u00b6","text":""},{"location":"Week_3_Core_Python/#87-now-iterate-through-lines-and-print-the-item-if-it-contains-your-netid","title":"8.7 Now iterate through <code>lines</code> and <code>print</code> the item if it contains your NetID\u00b6","text":""},{"location":"Week_4_Numpy/","title":"Week 4: Scientific Computing in Python","text":"In\u00a0[1]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[4]: Copied! <pre># find out what version we have\nnp.__version__\n</pre> # find out what version we have np.__version__ Out[4]: <pre>'2.0.0'</pre> In\u00a0[\u00a0]: Copied! <pre># find out what is in our namespace\ndir()\n</pre> # find out what is in our namespace dir() In\u00a0[\u00a0]: Copied! <pre># find out what's in numpy\ndir(np)\n</pre> # find out what's in numpy dir(np) <p>The numpy documentation is crucial!</p> <p>http://docs.scipy.org/doc/numpy/reference/</p> In\u00a0[14]: Copied! <pre>from IPython.display import Image\nImage(url='http://docs.scipy.org/doc/numpy/_images/threefundamental.png')\n</pre> from IPython.display import Image Image(url='http://docs.scipy.org/doc/numpy/_images/threefundamental.png') Out[14]: In\u00a0[7]: Copied! <pre># create an array from a list\na = np.array([9,0,2,1,0])\n</pre> # create an array from a list a = np.array([9,0,2,1,0]) In\u00a0[8]: Copied! <pre># find out the datatype\na.dtype\n</pre> # find out the datatype a.dtype Out[8]: <pre>dtype('int64')</pre> In\u00a0[9]: Copied! <pre># find out the shape\na.shape\n</pre> # find out the shape a.shape Out[9]: <pre>(5,)</pre> In\u00a0[10]: Copied! <pre># what is the shape\ntype(a.shape)\n</pre> # what is the shape type(a.shape) Out[10]: <pre>tuple</pre> In\u00a0[11]: Copied! <pre># another array with a different datatype and shape\nb = np.array([[5,3,1,9],[9,2,3,0]], dtype=np.float64)\n</pre> # another array with a different datatype and shape b = np.array([[5,3,1,9],[9,2,3,0]], dtype=np.float64) In\u00a0[12]: Copied! <pre># array with 3 rows x 4 columns\na_2d = np.array([[3,2,0,1],[9,1,8,7],[4,0,1,6]]) \na_2d\n</pre> # array with 3 rows x 4 columns a_2d = np.array([[3,2,0,1],[9,1,8,7],[4,0,1,6]])  a_2d Out[12]: <pre>array([[3, 2, 0, 1],\n       [9, 1, 8, 7],\n       [4, 0, 1, 6]])</pre> In\u00a0[13]: Copied! <pre># check dtype and shape\nb.dtype, b.shape\n</pre> # check dtype and shape b.dtype, b.shape Out[13]: <pre>(dtype('float64'), (2, 4))</pre> <p>Important Concept: The fastest varying dimension is the last dimension! The outer level of the hierarchy is the first dimension. (This is called \"c-style\" indexing)</p> In\u00a0[73]: Copied! <pre># create some uniform arrays\nc = np.zeros((9,9))\nd = np.ones((3,6,3), dtype=np.complex128)\ne = np.full((3,3), np.pi)\ne = np.ones_like(c)\nf = np.zeros_like(d)\n# Random arrays\ng = np.random.rand(3,4)\n</pre> # create some uniform arrays c = np.zeros((9,9)) d = np.ones((3,6,3), dtype=np.complex128) e = np.full((3,3), np.pi) e = np.ones_like(c) f = np.zeros_like(d) # Random arrays g = np.random.rand(3,4) <p>The <code>np.arange()</code> function is used to generate an array with evenly spaced values within a given interval. <code>np.arange()</code> can be used with one, two, or three parameters to specify the start, stop, and step values. If only one value is passed to the function, it will be interpreted as the stop value:</p> In\u00a0[16]: Copied! <pre># create some ranges\nnp.arange(10)\n</pre> # create some ranges np.arange(10) Out[16]: <pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[17]: Copied! <pre># arange is left inclusive, right exclusive\nnp.arange(2,4,0.25)\n</pre> # arange is left inclusive, right exclusive np.arange(2,4,0.25) Out[17]: <pre>array([2.  , 2.25, 2.5 , 2.75, 3.  , 3.25, 3.5 , 3.75])</pre> <p>Similarly, the <code>np.linspace()</code> function is used to construct an array with evenly spaced numbers over a given interval. However, instead of the step parameter, <code>np.linspace()</code> takes a num parameter to specify the number of samples within the given interval:</p> In\u00a0[18]: Copied! <pre># linearly spaced\nnp.linspace(2,4,20)\n</pre> # linearly spaced np.linspace(2,4,20) Out[18]: <pre>array([2.        , 2.10526316, 2.21052632, 2.31578947, 2.42105263,\n       2.52631579, 2.63157895, 2.73684211, 2.84210526, 2.94736842,\n       3.05263158, 3.15789474, 3.26315789, 3.36842105, 3.47368421,\n       3.57894737, 3.68421053, 3.78947368, 3.89473684, 4.        ])</pre> <p>Note that unlike <code>np.arange()</code>, <code>np.linspace()</code> includes the stop value by default (this can be changed by passing <code>endpoint=True</code>). Finally, it should be noted that while we could have used <code>np.arange()</code> to generate the same array in the above example, it is recommended to use <code>np.linspace()</code> when a non-integer step (e.g. 0.25) is desired.</p> In\u00a0[19]: Copied! <pre>np.linspace(2,4,20, endpoint = False)\n</pre> np.linspace(2,4,20, endpoint = False) Out[19]: <pre>array([2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2,\n       3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9])</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[20]: Copied! <pre>x = np.linspace(-4, 4, 9)\nx\n</pre> x = np.linspace(-4, 4, 9) x Out[20]: <pre>array([-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])</pre> In\u00a0[21]: Copied! <pre>y = np.linspace(-5, 5, 11)\ny\n</pre> y = np.linspace(-5, 5, 11) y Out[21]: <pre>array([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.,  5.])</pre> In\u00a0[22]: Copied! <pre>x_2d, y_2d = np.meshgrid(x, y)\n</pre>   x_2d, y_2d = np.meshgrid(x, y) In\u00a0[23]: Copied! <pre>x_2d\n</pre> x_2d Out[23]: <pre>array([[-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.],\n       [-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.]])</pre> In\u00a0[24]: Copied! <pre>y_2d\n</pre> y_2d Out[24]: <pre>array([[-5., -5., -5., -5., -5., -5., -5., -5., -5.],\n       [-4., -4., -4., -4., -4., -4., -4., -4., -4.],\n       [-3., -3., -3., -3., -3., -3., -3., -3., -3.],\n       [-2., -2., -2., -2., -2., -2., -2., -2., -2.],\n       [-1., -1., -1., -1., -1., -1., -1., -1., -1.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],\n       [ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.],\n       [ 3.,  3.,  3.,  3.,  3.,  3.,  3.,  3.,  3.],\n       [ 4.,  4.,  4.,  4.,  4.,  4.,  4.,  4.,  4.],\n       [ 5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.]])</pre> In\u00a0[25]: Copied! <pre># get some individual elements of xx\nx_2d[0,0], x_2d[-1,-1], x_2d[3,-5]\n</pre> # get some individual elements of xx x_2d[0,0], x_2d[-1,-1], x_2d[3,-5] Out[25]: <pre>(np.float64(-4.0), np.float64(4.0), np.float64(0.0))</pre> In\u00a0[26]: Copied! <pre># get some whole rows and columns\nx_2d[0].shape, x_2d[:,-1].shape\n</pre> # get some whole rows and columns x_2d[0].shape, x_2d[:,-1].shape Out[26]: <pre>((9,), (11,))</pre> In\u00a0[27]: Copied! <pre># get some ranges\nx_2d[3:10,3:5].shape\n</pre> # get some ranges x_2d[3:10,3:5].shape Out[27]: <pre>(7, 2)</pre> <p>There are many advanced ways to index arrays. You can read about them in the manual. Here is one example.</p> In\u00a0[28]: Copied! <pre># use a boolean array as an index\nidx = x_2d&lt;0\nx_2d[idx].shape\n</pre> # use a boolean array as an index idx = x_2d&lt;0 x_2d[idx].shape Out[28]: <pre>(44,)</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[32]: Copied! <pre># two dimensional grids\nx = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.linspace(-np.pi, np.pi, 50)\nxx, yy = np.meshgrid(x, y)\nxx.shape, yy.shape\n</pre> # two dimensional grids x = np.linspace(-2*np.pi, 2*np.pi, 100) y = np.linspace(-np.pi, np.pi, 50) xx, yy = np.meshgrid(x, y) xx.shape, yy.shape Out[32]: <pre>((50, 100), (50, 100))</pre> In\u00a0[33]: Copied! <pre>f = np.sin(xx) * np.cos(0.5*yy)\n</pre> f = np.sin(xx) * np.cos(0.5*yy) In\u00a0[34]: Copied! <pre>from matplotlib import pyplot as plt\n</pre> from matplotlib import pyplot as plt In\u00a0[35]: Copied! <pre>plt.pcolormesh(f)\n</pre> plt.pcolormesh(f) Out[35]: <pre>&lt;matplotlib.collections.QuadMesh at 0x117fdee80&gt;</pre> In\u00a0[36]: Copied! <pre># transpose\nplt.pcolormesh(f.T)\n</pre> # transpose plt.pcolormesh(f.T) Out[36]: <pre>&lt;matplotlib.collections.QuadMesh at 0x12624e400&gt;</pre> In\u00a0[37]: Copied! <pre>f.shape\n</pre> f.shape Out[37]: <pre>(50, 100)</pre> In\u00a0[38]: Copied! <pre>np.tile(f,(6,1)).shape\n</pre> np.tile(f,(6,1)).shape Out[38]: <pre>(300, 100)</pre> In\u00a0[39]: Copied! <pre># tile an array\nplt.pcolormesh(np.tile(f,(6,1)))\n</pre> # tile an array plt.pcolormesh(np.tile(f,(6,1))) Out[39]: <pre>&lt;matplotlib.collections.QuadMesh at 0x1262bbeb0&gt;</pre> In\u00a0[44]: Copied! <pre>from IPython.display import Image\nImage(url='http://scipy-lectures.github.io/_images/numpy_broadcasting.png',\n     width=720)\n</pre> from IPython.display import Image Image(url='http://scipy-lectures.github.io/_images/numpy_broadcasting.png',      width=720) Out[44]: In\u00a0[45]: Copied! <pre># multiply f by x\nprint(f.shape, x.shape)\ng = f * x\nprint(g.shape)\n</pre> # multiply f by x print(f.shape, x.shape) g = f * x print(g.shape) <pre>(50, 100) (100,)\n(50, 100)\n</pre> In\u00a0[46]: Copied! <pre># multiply f by y\nprint(f.shape, y.shape)\nh = f * y\nprint(h.shape)\n</pre> # multiply f by y print(f.shape, y.shape) h = f * y print(h.shape) <pre>(50, 100) (50,)\n</pre> <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[46], line 3\n      1 # multiply f by y\n      2 print(f.shape, y.shape)\n----&gt; 3 h = f * y\n      4 print(h.shape)\n\nValueError: operands could not be broadcast together with shapes (50,100) (50,) </pre> In\u00a0[69]: Copied! <pre># use newaxis special syntax\ny_new = y[:,np.newaxis]\nh = f * y_new\nprint(h.shape)\n</pre> # use newaxis special syntax y_new = y[:,np.newaxis] h = f * y_new print(h.shape) <pre>(50, 100)\n</pre> In\u00a0[48]: Copied! <pre># sum\ng.sum()\n</pre> # sum g.sum() Out[48]: <pre>np.float64(-3083.038387807155)</pre> In\u00a0[49]: Copied! <pre># mean\ng.mean()\n</pre> # mean g.mean() Out[49]: <pre>np.float64(-0.616607677561431)</pre> In\u00a0[50]: Copied! <pre># std\ng.std()\n</pre> # std g.std() Out[50]: <pre>np.float64(1.6402280119141424)</pre> In\u00a0[51]: Copied! <pre># apply on just one axis\n\n# Mean of each row (calculated across columns)\ng_xmean = g.mean(axis=1)\n\n# Mean of each column (calculated across rows)\n\ng_ymean = g.mean(axis=0)\n</pre> # apply on just one axis  # Mean of each row (calculated across columns) g_xmean = g.mean(axis=1)  # Mean of each column (calculated across rows)  g_ymean = g.mean(axis=0) In\u00a0[52]: Copied! <pre>plt.plot(x, g_ymean)\n</pre> plt.plot(x, g_ymean) Out[52]: <pre>[&lt;matplotlib.lines.Line2D at 0x1265e17f0&gt;]</pre> In\u00a0[53]: Copied! <pre>plt.plot(g_xmean, y)\n</pre> plt.plot(g_xmean, y) Out[53]: <pre>[&lt;matplotlib.lines.Line2D at 0x1266d3eb0&gt;]</pre> <p>Most real-world datasets \u2013 environmental or otherwise \u2013 have data gaps. Data can be missing for any number of reasons, including observations not being recorded or data corruption. While a cell corresponding to a data gap may just be left blank in a spreadsheet, when imported into Python, there must be some way to handle \"blank\" or missing values.</p> <p>Missing data should not be replaced with zeros, as 0 can be a valid value for many datasets, (e.g. temperature, precipitation, etc.). Instead, the convention is to fill all missing data with the constant NaN. NaN stands for \"Not a Number\" and is implemented in NumPy as np.nan.</p> <p>NaNs are handled differently by different packages. In NumPy, all computations involving NaN values will return nan:</p> In\u00a0[70]: Copied! <pre>data = np.array([[2.,2.7,1.89],\n                 [1.1, 0.0, np.nan],\n                 [3.2, 0.74, 2.1]])\n</pre> data = np.array([[2.,2.7,1.89],                  [1.1, 0.0, np.nan],                  [3.2, 0.74, 2.1]]) In\u00a0[71]: Copied! <pre>np.mean(data)\n</pre> np.mean(data) Out[71]: <pre>np.float64(nan)</pre> In\u00a0[72]: Copied! <pre>np.nanmean(data)\n</pre> np.nanmean(data) Out[72]: <pre>np.float64(1.71625)</pre> <p>First import numpy and matplotlib</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Week_4_Numpy/#week-4-scientific-computing-in-python","title":"Week 4: Scientific Computing in Python\u00b6","text":"<p>This week, you will learn how to do scientific computing in Python. As we learned from first lecture, Numpy is a fundamental package for scientific computing.</p> <p>The goal of this assignment is to gain comfort creating, visualizating, and computing with numpy array. By the end of the assignment, you should feel comfortable:</p> <ul> <li>Creating new Numpy arrays using <code>linspace</code> and <code>arange</code></li> <li>Computing basic formulas with Numpy arrays</li> <li>Performing reductions (e.g. <code>mean</code>, <code>std</code> on numpy arrays)</li> <li>Making 1D line plots</li> </ul>"},{"location":"Week_4_Numpy/#1-importing-and-examining-a-new-package","title":"1. Importing and Examining a New Package\u00b6","text":"<p>This will be our first experience with importing a package which is not part of the Python standard library.</p>"},{"location":"Week_4_Numpy/#2-ndarrays","title":"2. NDArrays\u00b6","text":"<p>The core class is the numpy ndarray (n-dimensional array). The n-dimensional array object in NumPy is referred to as an ndarray, a multidimensional container of homogeneous items \u2013 i.e. all values in the array are the same type and size. These arrays can be one-dimensional (one row or column vector), two-dimensional (m rows x n columns), or three-dimensional (arrays within arrays).</p> <p>The main difference between a numpy array an a more general data container such as <code>list</code> are the following:</p> <ul> <li>Numpy arrays can have multiple dimensions (while lists, tuples, etc. only have 1)</li> <li>Numpy arrays hold values of the same datatype (e.g. <code>int</code>, <code>float</code>), while <code>lists</code> can contain anything.</li> <li>Numpy optimizes numerical operations on arrays. Numpy is fast!</li> </ul>"},{"location":"Week_4_Numpy/#21-create-array-from-a-list","title":"2.1 Create array from a list\u00b6","text":""},{"location":"Week_4_Numpy/#22-create-arrays-using-functions","title":"2.2 Create arrays using functions\u00b6","text":""},{"location":"Week_4_Numpy/#exercise-1-create-a-1d-array-ranging-from-0-to-100-including-100-with-an-interval-of-5","title":"Exercise 1: Create a 1D array ranging from 0 to 100 (including 100) with an interval of 5.\u00b6","text":""},{"location":"Week_4_Numpy/#23-create-two-dimensional-grids","title":"2.3 Create two-dimensional grids\u00b6","text":""},{"location":"Week_4_Numpy/#exercise-3-explain-what-the-meshgrid-function-does-what-is-the-difference-between-x_2d-and-y_2d","title":"Exercise 3: Explain what the meshgrid function does. What is the difference between <code>x_2d</code> and <code>y_2d</code>?\u00b6","text":""},{"location":"Week_4_Numpy/#3-indexing-in-numpy","title":"3. Indexing in Numpy\u00b6","text":"<p>Indexing in NumPy allows you to access and modify elements, rows, columns, or subarrays of an array. Basic indexing is similar to lists.</p>"},{"location":"Week_4_Numpy/#exercise-4-get-the-last-two-columns-of-y_2d-array","title":"Exercise 4: Get the last two columns of <code>y_2d</code> array.\u00b6","text":""},{"location":"Week_4_Numpy/#4-array-operations","title":"4. Array Operations\u00b6","text":"<p>There are a huge number of operations available on arrays. All the familiar arithemtic operators are applied on an element-by-element basis.</p>"},{"location":"Week_4_Numpy/#41-basic-math","title":"4.1 Basic Math\u00b6","text":""},{"location":"Week_4_Numpy/#visualizing-arrays-with-matplotlib","title":"Visualizing Arrays with Matplotlib\u00b6","text":"<p>It can be hard to work with big arrays without actually seeing anything with our eyes! We will now bring in Matplotib to start visualizating these arrays. For now we will just skim the surface of Matplotlib. Much more depth will be provided in the next chapter.</p>"},{"location":"Week_4_Numpy/#42-manipulating-array-dimensions","title":"4.2 Manipulating array dimensions\u00b6","text":""},{"location":"Week_4_Numpy/#43-broadcasting","title":"4.3 Broadcasting\u00b6","text":"<p>Broadcasting is an efficient way to multiply arrays of different sizes</p>"},{"location":"Week_4_Numpy/#exercise-5-what-is-the-difference-between-y-and-y_new-why-f-y-gives-an-error-but-f-y_new-doesnt","title":"Exercise 5: What is the difference between y and y_new? Why <code>f * y</code> gives an error, but <code>f * y_new</code> doesn't?\u00b6","text":""},{"location":"Week_4_Numpy/#44-reduction-operations","title":"4.4 Reduction Operations\u00b6","text":""},{"location":"Week_4_Numpy/#5-missing-data","title":"5. Missing data\u00b6","text":""},{"location":"Week_4_Numpy/#6-assignment","title":"6. Assignment\u00b6","text":""},{"location":"Week_4_Numpy/#61-create-two-2d-arrays-representing-coordinates-x-y","title":"6.1. Create two 2D arrays representing coordinates x, y\u00b6","text":"<p>Both should cover the range (-2, 2) and have 100 points in each direction</p>"},{"location":"Week_4_Numpy/#62-visualize-each-2d-array-using-pcolormesh","title":"6.2. Visualize each 2D array using <code>pcolormesh</code>\u00b6","text":"<p>Use the correct coordiantes for the x and y axes.</p>"},{"location":"Week_4_Numpy/#63-from-your-cartesian-coordinates-create-polar-coordinates-r-and-varphi","title":"6.3 From your cartesian coordinates, create polar coordinates $r$ and $\\varphi$:\u00b6","text":"<p>$r = \\sqrt{x^2 + y^2}$</p> <p>$\\varphi = atan2(y,x)$</p> <p>You will need to use numpy's <code>arctan2</code> function. Read its documentation.</p>"},{"location":"Week_4_Numpy/#64-visualize-r-and-varphi-on-the-2d-x-y-plane-using-pcolormesh","title":"6.4. Visualize $r$ and $\\varphi$ on the 2D  $x$ / $y$ plane using <code>pcolormesh</code>\u00b6","text":""},{"location":"Week_4_Numpy/#65-caclulate-the-quanity-f-cos24r-sin24varphi","title":"6.5 Caclulate the quanity $f = \\cos^2(4r) + \\sin^2(4\\varphi)$\u00b6","text":"<p>And plot it on the $x$ / $y$ plane</p>"},{"location":"Week_4_Numpy/#66-plot-the-mean-of-f-with-respect-to-the-x-axis","title":"6.6 Plot the mean of f with respect to the x axis\u00b6","text":"<p>as a function of y</p>"},{"location":"Week_4_Numpy/#67-plot-the-mean-of-f-with-respect-to-the-y-axis","title":"6.7 Plot the mean of f with respect to the y axis\u00b6","text":"<p>as a function of x</p>"}]}